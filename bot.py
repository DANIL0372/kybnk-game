import asyncio
import logging
from aiogram import Bot, Dispatcher, Router
from aiogram.types import Message, WebAppInfo
from aiogram.filters import CommandStart
from aiogram.enums import ParseMode
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.client.default import DefaultBotProperties

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)


def webapp_builder() -> InlineKeyboardBuilder:
    builder = InlineKeyboardBuilder()
    builder.button(
        text="üçä –ò–≥—Ä–∞—Ç—å –≤ KYBNK Clicker",
        web_app=WebAppInfo(url="https://api.cloudflare.com/client/v4/accounts/cec8d068d1d126954dfc583292897621/tokens/verify")
    )
    return builder.as_markup()
    

router = Router()


@router.message(CommandStart())
async def start_command(message: Message) -> None:
    logger.info(f"User {message.from_user.id} started the bot")
    try:
        await message.reply(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ KYBNK Clicker!\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É:",
            reply_markup=webapp_builder()
        )
        logger.info("Start message sent successfully")
    except Exception as e:
        logger.error(f"Error sending start message: {str(e)}")


async def main() -> None:
    logger.info("Starting bot...")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    bot = Bot(
        token='8131382951:AAEYbYjhBod6_iETzK-qGeiKvhDnVnjy10w',
        default=DefaultBotProperties(parse_mode=ParseMode.HTML))

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ —Å —Ä–æ—É—Ç–µ—Ä–æ–º
    dp = Dispatcher()
    dp.include_router(router)

    try:
        # –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥
        await bot.delete_webhook(drop_pending_updates=True)
        logger.info("Webhook deleted")

        await dp.start_polling(bot)
        logger.info("Polling started")
    except Exception as e:
        logger.critical(f"Bot failed: {str(e)}")
    finally:
        await bot.session.close()
        logger.info("Bot session closed")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("Bot stopped by user")
    except Exception as e:
        logger.critical(f"Unexpected error: {str(e)}")