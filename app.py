import flet as ft
import os
import asyncio


class ClickerGame:
    def __init__(self, page: ft.Page):
        self.page = page
        self.setup_page()
        self.current_score = 0
        self.create_ui()
        self.setup_events()
        self.page.update()

    def setup_page(self):
        self.page.title = "KYBNK SHOW clicker"
        self.page.theme_mode = ft.ThemeMode.DARK
        self.page.bgcolor = '#141221'
        self.page.vertical_alignment = ft.MainAxisAlignment.CENTER
        self.page.horizontal_alignment = ft.CrossAxisAlignment.CENTER
        self.page.fonts = {"FulboArgenta": "fonts/FulboArgenta.ttf"}
        self.page.theme = ft.Theme(font_family="FulboArgenta")
        self.page.padding = 20
        self.page.window_width = 400
        self.page.window_height = 700

    def create_ui(self):
        try:
            # –û—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã UI
            self.score = ft.Text(value="0", size=100)

            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
            self.progress_bar = ft.ProgressBar(
                value=0,
                width=350,  # –®–∏—Ä–∏–Ω–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ (–º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å)
                height=25,  # –í—ã—Å–æ—Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ (–º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å)
                bar_height=25,  # –í—ã—Å–æ—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —á–∞—Å—Ç–∏
                color="#ff8b1f",
                bgcolor="#bf6524"
            )

            # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∫–ª–∏–∫–æ–≤
            try:
                self.image = ft.Image(
                    src="photo.png",
                    fit=ft.ImageFit.CONTAIN,
                    animate_scale=ft.Animation(duration=200, curve=ft.AnimationCurve.EASE))
            except:
                # –ó–∞–≥–ª—É—à–∫–∞ –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
                self.image = ft.Container(
                    width=300,
                    height=300,
                    bgcolor=ft.colors.AMBER,
                    border_radius=10,
                    content=ft.Icon(ft.icons.WARNING, size=100, color=ft.colors.RED)
                )

            # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–π
            self.animation_stack = ft.Stack(expand=True)

            # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            self.main_stack = ft.Stack(
                controls=[
                    self.image,
                    self.animation_stack
                ],
                width=300,
                height=300
            )

            # –ö–ª–∏–∫–∞–±–µ–ª—å–Ω–∞—è –æ–±–ª–∞—Å—Ç—å - —Ç–µ–ø–µ—Ä—å –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω
            self.click_area = ft.Container(
                content=ft.Column(
                    [
                        self.score,
                        self.main_stack,
                        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ —Å–æ —Å–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–º–∏ –∫—Ä–∞—è–º–∏
                        ft.Container(
                            content=self.progress_bar,
                            border_radius=20,  # –°–∫—Ä—É–≥–ª–µ–Ω–∏–µ —É–≥–ª–æ–≤
                            padding=ft.padding.symmetric(vertical=10),
                        )
                    ],
                    alignment=ft.MainAxisAlignment.CENTER,
                    horizontal_alignment=ft.CrossAxisAlignment.CENTER,
                    expand=True
                ),
                alignment=ft.alignment.center,
                ink=False,
                expand=True
            )

            # –°–±–æ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            self.page.add(self.click_area)
        except Exception as e:
            self.show_error(f"UI creation error: {str(e)}")

    def setup_events(self):
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞
        self.click_area.on_click = self.safe_handle_click

    async def safe_handle_click(self, e):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–±—ã—Ç–∏–µ –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
            if hasattr(e, 'handled') and e.handled:
                return

            # –ü–æ–º–µ—á–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ
            e.handled = True

            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            if hasattr(e, 'local_x') and hasattr(e, 'local_y'):
                x, y = e.local_x, e.local_y
            elif hasattr(e, 'x') and hasattr(e, 'y'):
                x, y = e.x, e.y
            else:
                # –ï—Å–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—Ç—Ä
                x, y = self.page.width / 2, self.page.height / 2

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–ª–∏–∫
            await self.handle_click(x, y)
        except Exception as ex:
            self.show_error(f"Click processing error: {str(ex)}")

    async def handle_click(self, x, y):
        try:
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç
            self.current_score += 1
            self.score.value = str(self.current_score)
            self.score.update()

            # –ê–Ω–∏–º–∞—Ü–∏—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            self.image.scale = 0.9
            self.image.update()

            # –°–æ–∑–¥–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é +1 –≤ —Ç–æ—á–∫–µ –∫–ª–∏–∫–∞
            self.create_counter_animation(x, y)

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
            self.progress_bar.value = (self.current_score % 100) / 100
            self.progress_bar.update()

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 100 –∫–ª–∏–∫–æ–≤
            if self.current_score % 100 == 0:
                self.show_snackbar("üçä +100")

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º—É —Ä–∞–∑–º–µ—Ä—É
            await asyncio.sleep(0.1)
            self.image.scale = 1
            self.image.update()
        except Exception as e:
            self.show_error(f"Click error: {str(e)}")

    def create_counter_animation(self, x, y):
        try:
            # –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
            counter = ft.Text(
                value="+1",
                size=30,
                opacity=1,
                left=x - 15,
                top=y - 40,
                color="#ff8b1f",
                weight=ft.FontWeight.BOLD,
                animate_position=300,
                animate_opacity=300
            )

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å—Ç–µ–∫
            self.animation_stack.controls.append(counter)
            self.animation_stack.update()

            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
            asyncio.create_task(self.animate_counter(counter, y))
        except Exception as e:
            self.show_error(f"Animation error: {str(e)}")

    async def animate_counter(self, counter, start_y):
        try:
            # –ö—Ä–∞—Ç–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∞–Ω–∏–º–∞—Ü–∏–∏
            await asyncio.sleep(0.1)

            # –ê–Ω–∏–º–∞—Ü–∏—è –¥–≤–∏–∂–µ–Ω–∏—è –≤–≤–µ—Ä—Ö
            counter.top = start_y - 80
            counter.opacity = 0
            counter.update()

            # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
            await asyncio.sleep(0.5)

            # –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç
            if counter in self.animation_stack.controls:
                self.animation_stack.controls.remove(counter)
                self.animation_stack.update()
        except Exception as e:
            print(f"Animation task error: {str(e)}")

    def show_snackbar(self, message):
        try:
            self.page.snack_bar = ft.SnackBar(
                content=ft.Text(
                    message,
                    size=20,
                    color="#ff8b1f",
                    text_align=ft.TextAlign.CENTER
                ),
                bgcolor="#25223a",
                open=True
            )
            self.page.update()
        except Exception as e:
            self.show_error(f"Snackbar error: {str(e)}")

    def show_error(self, message):
        try:
            print(f"ERROR: {message}")
            self.page.snack_bar = ft.SnackBar(
                ft.Text(f"Error: {message}", color="red"),
                open=True
            )
            self.page.update()
        except:
            print(f"CRITICAL ERROR: {message}")


def main(page: ft.Page):
    try:
        game = ClickerGame(page)
    except Exception as e:
        page.snack_bar = ft.SnackBar(
            ft.Text(f"Fatal error: {str(e)}", color="red"),
            open=True
        )
        page.update()


if __name__ == "__main__":
    ft.app(
        target=main,
        view=ft.AppView.WEB_BROWSER,
        port=0,
        use_color_emoji=True,
        assets_dir="assets",
        route_url_strategy="path",
        web_renderer="html",
        upload_dir="uploads",
        # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–µ–±-–≤–µ—Ä—Å–∏–∏:
        export_path="web_build"  # –ü–∞–ø–∫–∞ –¥–ª—è —Å–±–æ—Ä–∫–∏ –≤–µ–±-–≤–µ—Ä—Å–∏–∏
    )